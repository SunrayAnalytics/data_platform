name: Deploy DBT-project

# NOTE: In the github settings we need to allow other workflows in the org to call this one

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
jobs:
  deploy:
    name: Deploy ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency: prod
    permissions:
      id-token: write # This is required for requesting the JWT
      #  contents: read  # This is required for actions/checkout
      actions: read
      deployments: write
      contents: write
      attestations: write # Not sure is this needed
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE }}
          role-session-name: oidc-role
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Build Image # TODO Get the repo, and the snowflake secret
        run: |
          echo $GITHUB_SHA
          ls -R
        env:
          GITHUB_HASH: ${{ github.sha }}
      - name: Build Image # TODO Get the repo, and the snowflake secret
        run: |
          set -e -x

          cat << EOF > Dockerfile
          FROM ${BASE_IMAGE}

          # These build arguments are needed for dbt compile
          ARG SNOWFLAKE_ACCOUNT
          ARG DBT_SNOWFLAKE_DATABASE
          ARG DBT_SNOWFLAKE_SCHEMA
          ARG DBT_SNOWFLAKE_ROLE
          ARG SNOWFLAKE_WAREHOUSE
          ARG SNOWFLAKE_USER
          ARG SNOWFLAKE_PASSWORD

          RUN pip install --upgrade snowflake-connector-python # Hack to upgrade to a later version 3.12.2

          # Copy in dbt-project
          RUN mkdir -p /opt/dagster/app/dbt
          COPY models /opt/dagster/app/dbt/models
          COPY tests /opt/dagster/app/dbt/tests
          COPY macros /opt/dagster/app/dbt/macros
          COPY seeds /opt/dagster/app/dbt/seeds
          COPY snapshots /opt/dagster/app/dbt/snapshots
          COPY dbt_project.yml /opt/dagster/app/dbt/

          WORKDIR /opt/dagster/app/dbt
          #RUN dbt clean && dbt deps && dbt compile
          WORKDIR /opt/dagster/app
          EOF


          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DockerRepository}:${CurrentRevision}

          SecretValue=$(aws secretsmanager get-secret-value --secret-id $SecretKey| jq -r '.SecretString')

          SnowflakeAccount=$(echo $SecretValue | jq -r .account)
          SnowflakeDatabase=$(echo $SecretValue | jq -r .database)
          SnowflakeUser=$(echo $SecretValue | jq -r .user)
          SnowflakePassword=$(echo $SecretValue | jq -r .password)
          SnowflakeWarehouse=$(echo $SecretValue | jq -r .warehouse)

          echo "Building ${DockerRepository}:${CurrentRevision}"
          docker build \
            -t ${DockerRepository}:${CurrentRevision} \
            --build-arg SNOWFLAKE_ACCOUNT=$SnowflakeAccount \
            --build-arg DBT_SNOWFLAKE_DATABASE=$SnowflakeDatabase \
            --build-arg DBT_SNOWFLAKE_SCHEMA=test \
            --build-arg SNOWFLAKE_USER=$SnowflakeUser \
            --build-arg SNOWFLAKE_PASSWORD=$SnowflakePassword \
            --build-arg SNOWFLAKE_WAREHOUSE=$SnowflakeWarehouse \
            .
        env:
          DockerRepository: ${{ vars.ECR_REPOSITORY_URL }}
          SecretKey: ${{ vars.SNOWFLAKE_SECRET }}
          CurrentRevision: ${{ github.sha }}
          BASE_IMAGE: 184065244952.dkr.ecr.eu-west-1.amazonaws.com/transformation-base:latest # TODO Set the current version of this repository here
      - name: Push Image # TODO Get the repo, and the snowflake secret
        env:
          DockerRepository: ${{ vars.ECR_REPOSITORY_URL }}
          SNOWFLAKE_SECRET: ${{ vars.SNOWFLAKE_SECRET }}
          CurrentRevision: ${{ github.sha }}
        run: |
          set -e

          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DockerRepository}:${CurrentRevision}

          echo "Pushing image ${DockerRepository}:${CurrentRevision}"
          docker push ${DockerRepository}:${CurrentRevision}

          docker tag ${DockerRepository}:${CurrentRevision} ${DockerRepository}:latest
          docker push ${DockerRepository}:latest
