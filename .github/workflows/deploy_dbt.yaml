name: Deploy DBT-project

# NOTE: In the github settings we need to allow other workflows in the org to call this one

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
jobs:
  deploy:
    name: Deploy ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    concurrency: prod
    permissions:
      id-token: write # This is required for requesting the JWT
      #  contents: read  # This is required for actions/checkout
      actions: read
      deployments: write
      contents: write
      attestations: write # Not sure is this needed
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        id: creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE }}
          role-session-name: oidc-role
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Build Image # TODO Get the repo, and the snowflake secret
        run: |
          echo $GITHUB_SHA
          ls -R
        env:
          GITHUB_HASH: ${{ github.sha }}
      - name: Build Image # TODO Get the repo, and the snowflake secret
        run: |
          set -e -x
          SCRIPT_DIR=$( cd -- "$( dirname -- "${BASH_SOURCE[0]}" )" &> /dev/null && pwd )

          pushd $SCRIPT_DIR/..

          #if [[ $( git status --porcelain . | wc -l) != "0" ]]; then
          #    echo "This checkout is dirty refusing to build"
          #    exit 1
          #fi


          DockerRepository="${ECR_REPOSITORY_URL:-184065244952.dkr.ecr.eu-west-1.amazonaws.com/sunrayanalytics-data_platform_reference_implementation}"
          SecretKey="${SNOWFLAKE_SECRET:-snowflake-db20241021074242203800000001}"

          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DockerRepository}:${CurrentRevision}

          SecretValue=$(aws secretsmanager get-secret-value --secret-id $SecretKey| jq -r '.SecretString')

          SnowflakeAccount=$(echo $SecretValue | jq -r .account)
          SnowflakeDatabase=$(echo $SecretValue | jq -r .database)
          SnowflakeUser=$(echo $SecretValue | jq -r .user)
          SnowflakePassword=$(echo $SecretValue | jq -r .password)
          SnowflakeWarehouse=$(echo $SecretValue | jq -r .warehouse)

          pwd
          echo "Building ${DockerRepository}:${CurrentRevision}"
          docker build \
          -t ${DockerRepository}:${CurrentRevision} \
          --build-arg SNOWFLAKE_ACCOUNT=$SnowflakeAccount \
          --build-arg DBT_SNOWFLAKE_DATABASE=$SnowflakeDatabase \
          --build-arg DBT_SNOWFLAKE_SCHEMA=test \
          --build-arg SNOWFLAKE_USER=$SnowflakeUser \
          --build-arg SNOWFLAKE_PASSWORD=$SnowflakePassword \
          --build-arg SNOWFLAKE_WAREHOUSE=$SnowflakeWarehouse \
          .
          popd
        env:
          ECR_REPOSITORY_URL: ${{ vars.ECR_REPOSITORY_URL }}
          SNOWFLAKE_SECRET: ${{ vars.SNOWFLAKE_SECRET }}
          CurrentRevision: ${{ github.sha }}
      - name: Push Image # TODO Get the repo, and the snowflake secret
        env:
          ECR_REPOSITORY_URL: ${{ vars.ECR_REPOSITORY_URL }}
          SNOWFLAKE_SECRET: ${{ vars.SNOWFLAKE_SECRET }}
          CurrentRevision: ${{ github.sha }}
        run: |
          set -e

          #if [[ $( git status --porcelain | wc -l) != "0" ]]; then
          #    echo "This checkout is dirty refusing to build"
          #    exit 1
          #fi

          DockerRepository="${ECR_REPOSITORY_URL:-184065244952.dkr.ecr.eu-west-1.amazonaws.com/sunrayanalytics-data_platform_reference_implementation}"

          aws ecr get-login-password --region eu-west-1 | docker login --username AWS --password-stdin ${DockerRepository}:${CurrentRevision}

          echo "Pushing image ${DockerRepository}:${CurrentRevision}"
          docker push ${DockerRepository}:${CurrentRevision}

          docker tag ${DockerRepository}:${CurrentRevision} ${DockerRepository}:latest
          docker push ${DockerRepository}:latest
